generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                     String                  @id @default(cuid())
  createdAt              DateTime                @default(now())
  email                  String                  @unique
  emailVerified          Boolean                 @default(false)
  password               String
  emailVerificationToken EmailVerificationToken?
  giftCodes              GiftCode[]
  Invoice                Invoice[]
  passwordResetToken     PasswordResetToken?
  ownedProducts          Product[]               @relation("ProductToUser")
}

model Product {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  name          String
  stripeId      String     @unique
  price         String
  description   String
  pubName       String     @unique
  thumbnail     String
  gameType      String
  backgroundImg String?
  rules         String?
  cards         Card[]
  DemoCard      DemoCard[]
  GiftCode      GiftCode[]
  Invoice       Invoice[]  @relation("InvoiceToProduct")
  owners        User[]     @relation("ProductToUser")
}

model Invoice {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  userId       String
  amount       BigInt
  wasAGiftCode Boolean
  user         User      @relation(fields: [userId], references: [id])
  products     Product[] @relation("InvoiceToProduct")
}

model GiftCode {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  code      String   @unique
  productId String
  userId    String?
  redeemed  Boolean  @default(false)
  Product   Product  @relation(fields: [productId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  userId   String   @unique
  hash     String   @unique
  expireAt DateTime @default(dbgenerated("(now() + '00:30:00'::interval)"))
  user     User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  userId   String   @unique
  hash     String   @unique
  expireAt DateTime @default(dbgenerated("(now() + '00:30:00'::interval)"))
  user     User     @relation(fields: [userId], references: [id])
}

model Card {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  title          String
  description    String
  productId      String
  forbiddenWords String[]
  dare           String?
  truth          String?
  Product        Product  @relation(fields: [productId], references: [id])
}

model DemoCard {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  title          String
  description    String
  productId      String
  forbiddenWords String[]
  dare           String?
  truth          String?
  Product        Product  @relation(fields: [productId], references: [id])
}
